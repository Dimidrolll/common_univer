#include <iostream>
#include <string>
using namespace std;

void multiplication(char *str, int str_p) //через целочисленные массивы
{
  int buf;

char ar[999], ar1[999]; //массив для хранения полученного результата операции возведения в степень
int i, j, l, len,len1 = 0, p, t;

for (i = 0; str[i] != '\0'; i++)
  len1++;
//reverse(str.begin(), str.end()); //переворачиваем входную строку
for (i = 0; i <= len1 / 2 - 1; i++)
{
buf = ar1[i];
ar1[i] = ar1[len1 - i - 1];
ar1[len1 - i - 1] = buf;
}

len = str_p * len1 + 1; //максимально вычисляем размер результирующего массива/строки



for (i = 0; i < len; i++) //зануляем строку и массив
{
ar1[i] = 0;
ar[i] = 0;
}
for (i = 0; i < len; i++) //представляем строку в виде str[(n-1)..0]00..000
ar1[i] += str[i] - '0';

for (l = 1; l < str_p; l++) //производим операцию возведения в степень
{
for (i = 0; i < len; i++) //производим перемножения чисел, хранящихся в str1,
{ //сначала на разряд единиц, потом сотен и т.д. строки str
for (j = 0; j < len; j++)
{
ar[j + i] += ar1[j]*(str[i] - '0');
p = j + i;
if (ar[p] > 9) //проверяем, является полученное число цифрой. если не является, то
{ //в переменную t заносим количество десятков, результуруищему массиву
t = ar[p] / 10; //оставляем остаток от деления на 10 и добавляем к уже имеющемся
ar[p] %= 10; //количеству десятков полученное t
ar[p + 1] += t;
}
}
}
for (i = 0; i < len; i++) //перезаписываем в str1 полученное число
ar1[i] = ar[i];
for (i = 0; i < len; i++) //зануляем результирующий массив
ar[i] = 0;
}

int final_count = len;
i = len - 1;
while (ar1[i] == 0){
    i--;
    final_count--;
}
//int buf;
for (i = 0; i <= final_count / 2 - 1; i++)
{
buf = ar1[i];
ar1[i] = ar1[final_count - i - 1];
ar1[final_count - i - 1] = buf;
}
for (i = 0; i < final_count; i++) //выводим полученный результат
cout << (int)ar1[i];
}

void compare(char *str_a,int m, char *str_b, int n)
{
	int i = 0;
	if (m == n) 
	{
		while ((str_a[i] == str_b[i]) && (i < m - 1)) 
			i++;
		if (str_a[i] > str_b[i])
			cout << "Наибольшее число: " << str_a << endl;
		else
			if (str_a[i] == str_b[i])
				cout << "Числа равны " << str_a << "=" << str_b << endl;
			else
				cout << "Наибольшее число: " << str_b << endl;
	}
	else 
		if (m > n) cout << "Наибольшее число: " << str_a << endl;
		else cout << "Наибольшее число: " << str_b << endl;
}

void main()
{
	setlocale(0, "");
	unsigned int m, n, i, count = 0, count1 = 0,len_a = 0, len_b = 0;
	bool k = 1;
	char a[100], b[100];// ca[100], cb[100];
	
	cout << "Введите число : "; gets(a);
	for (i = 0;a[i] != '\0'; i++){
		if (isdigit(a[i]) == 0) //проверка содержимого строки на принадлежность не к числу
			count++; 
    len_a++;
  }
	if ((count > 0) || ((a[0] >= '4') && (a[1] >= '0') && (a[2] >= '0') && (a[3] >= '0') //знаки поменял
&& (a[4] > '0')) || (a[0] == '0') || (len_a > 5))
	{
		cout << "Введены некорректные данные. Повторите ввод числа (0; 40000]";
		k = 0;
	}
	if (k == 1)
	{
		cout << "Введите степень числа : "; cin >> m;
		if (m > 10)
		{
			cout << "Введены некорректные данные. Повторите ввод степени числа [0; 10]";
			k = 0;
		}
	}
	cout << endl;

	cout << "Введите число : "; gets(b);
	if (k == 1)
	{
		for (i = 0; b[i] !='\0'; i++){
			if (isdigit(b[i]) == 0) //проверка содержимого строки на принадлежность не к числу
				count1++; 
      len_b++;
      }
		if ((count1 > 0) || ((b[0] >= '4') && (b[1] >= '0') && (b[2] >= '0') && (b[3] >= '0') //знаки поменял
&& (b[4] > '0')) || (b[0] == '0') || (len_b > 5))
		{
			cout << "Введены некорректные данные. Повторите ввод числа (0; 40000]";
			k = 0;
		}
		if (k == 1)
		{
			cout << "Введите степень числа : "; cin >> n;
			if (n > 10)
			{
				cout << "Введены некорректные данные. Повторите ввод степени числа [0; 10]";
				k = 0;
			}
		}
	}
	cout << endl;

	if ((m == 0) && (n == 0))
		cout << "Числа равны " << endl;
	else 
		if ((m == 0) && (n >= 1))
		{
			cout << "Наибольшее число: "<< b << endl;
		}
		else
			if ((m >= 1) && (n == 0))
			{
				cout << "Наибольшее число: "<< a << endl; 
			}
			else
				if ((m >= 1) && (n >= 1))
				{
					multiplication(a, m);
					multiplication(b, n);
					compare(a,m,b,n);
				}
}